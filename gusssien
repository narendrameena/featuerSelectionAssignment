import numpy as np
import pods

#pods.notebook.display_google_book(id='ORUOAAAAQAAJ', page='213')
#pods.notebook.display_google_book(id='ORUOAAAAQAAJ', page='217')
#pods.notebook.display_google_book(id='ORUOAAAAQAAJ', page='221')


#start=int(timedelta(hours=0, minutes=20, seconds=15).total_seconds())
#from IPython.display import YouTubeVideo
#YouTubeVideo('AvlnFnvFw_0',start=start)

# set prior variance on w
alpha = 4.
# set the order of the polynomial basis set
order = 5
# set the noise variance
sigma2 = 0.01

from datetime import timedelta
data = pods.datasets.olympic_marathon_men()
print(data)
x = data['X']
print(x)

y = data['Y']
print(y)

num_data = x.shape[0]
print(num_data)
num_pred_data = 100 # how many points to use for plotting predictions
x_pred = np.linspace(1890, 2016, num_pred_data)[:, None] # input locations for predictions

'''
def polynomial(x, degree, loc, scale):
    degrees = np.arange(degree+1)
    return ((x-loc)/scale)**degrees

loc = 1950.
scale = 1.
degree = 5.
Phi_pred = polynomial(x_pred, degree=degree, loc=loc, scale=scale)
Phi = polynomial(x, degree=degree, loc=loc, scale=scale)

w_vec = np.random.normal(size=200)
print('w sample mean is ', w_vec.mean())
print('w sample variance is ', w_vec.var())

phi = 7
f_vec = phi*w_vec
print('True mean should be phi*0 = 0.')
print('True variance should be phi*phi*1 = ', phi*phi)
print('f sample mean is ', f_vec.mean())
print('f sample variance is ', f_vec.var())

mu = 4 # mean of the distribution
alpha = 2 # variance of the distribution
w_vec = np.random.normal(size=200)*np.sqrt(alpha) + mu
print('w sample mean is ', w_vec.mean())
print('w sample variance is ', w_vec.var())

# First the standard normal
import matplotlib.pyplot as plt
#%matplotlib inline
z_vec = np.random.normal(size=1000) # by convention, in statistics, z is often used to denote samples from the standard normal
w_vec = z_vec*np.sqrt(alpha) + mu
# plot normalized histogram of w, and then normalized histogram of z on top
plt.hist(w_vec, bins=30, normed=True)
plt.hist(z_vec, bins=30, normed=True)
plt.legend(('$w$', '$z$'))


K = degree + 1
z_vec = np.random.normal(size=K)
w_sample = z_vec*np.sqrt(alpha)
print(w_sample)


f_sample = np.dot(Phi_pred,w_sample)
plt.plot(x_pred.flatten(), f_sample.flatten(), 'r-')

scale = 100.
Phi_pred = polynomial(x_pred, degree=degree, loc=loc, scale=scale)
Phi = polynomial(x, degree=degree, loc=loc, scale=scale)

f_sample = np.dot(Phi_pred,w_sample)
plt.plot(x_pred.flatten(), f_sample.flatten(), 'r-')

num_samples = 10
K = degree+1
for i in range(num_samples):
    z_vec = np.random.normal(size=K)
    w_sample = z_vec*np.sqrt(alpha)
    f_sample = np.dot(Phi_pred,w_sample)
    plt.plot(x_pred.flatten(), f_sample.flatten())

#from datetime import timedelta
#start=int(timedelta(hours=0, minutes=0, seconds=15).total_seconds())
#YouTubeVideo('AvlnFnvFw_0',start=start)

#start=int(timedelta(hours=0, minutes=22, seconds=42).total_seconds())
#YouTubeVideo('Os1iqgpelPw', start=start)
'''